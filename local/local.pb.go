// Code generated by protoc-gen-go. DO NOT EDIT.
// source: local.proto

package local

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	storage_service "github.com/j-and-j-global/storage-service"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("local.proto", fileDescriptor_aaf1a48d01603033) }

var fileDescriptor_aaf1a48d01603033 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8e, 0x3d, 0x4e, 0xc4, 0x30,
	0x10, 0x85, 0xb3, 0x05, 0x46, 0x32, 0x7f, 0xd2, 0x14, 0x14, 0xa6, 0x4b, 0x45, 0x63, 0x5b, 0xec,
	0x22, 0x71, 0x00, 0x7e, 0x2a, 0x44, 0xb3, 0xe2, 0x00, 0x76, 0x76, 0xf0, 0x66, 0x99, 0xcd, 0x44,
	0x89, 0x0d, 0xe2, 0xb6, 0x1c, 0x05, 0x25, 0x56, 0x22, 0x51, 0xa4, 0x9c, 0xe7, 0xef, 0x7d, 0xcf,
	0xf2, 0x8c, 0xb8, 0x72, 0x64, 0xda, 0x8e, 0x23, 0xc3, 0xc9, 0x78, 0xa8, 0x9b, 0xc0, 0x1c, 0x08,
	0xed, 0x18, 0xfa, 0xf4, 0x61, 0xf1, 0xd8, 0xc6, 0x9f, 0xcc, 0xa8, 0x87, 0x50, 0xc7, 0x7d, 0xf2,
	0xa6, 0xe2, 0xa3, 0x3d, 0x68, 0xd7, 0xec, 0xf4, 0x41, 0x07, 0x62, 0xef, 0xc8, 0xf6, 0x91, 0x3b,
	0x17, 0x50, 0xf7, 0xd8, 0x7d, 0xd5, 0x15, 0x4e, 0x77, 0x2e, 0xae, 0x7f, 0x57, 0xf2, 0xfc, 0x75,
	0xf0, 0x6f, 0x73, 0x0c, 0x6b, 0x79, 0xfa, 0x86, 0xdf, 0x2f, 0x35, 0x21, 0x5c, 0x9b, 0x3c, 0x69,
	0xa6, 0x49, 0xf3, 0x3c, 0x4c, 0xaa, 0x0b, 0x33, 0x39, 0x06, 0xac, 0x2c, 0xe0, 0x5e, 0x8a, 0xf7,
	0x96, 0xd8, 0xed, 0xe0, 0x72, 0x7e, 0x7a, 0xdc, 0xa7, 0xe6, 0x53, 0x2d, 0x28, 0xca, 0xe2, 0x76,
	0x05, 0x77, 0x52, 0x3c, 0x21, 0x61, 0x44, 0xf8, 0x2f, 0x5c, 0x2e, 0xc1, 0x46, 0x8a, 0x6d, 0x74,
	0x31, 0xf5, 0x8b, 0x7f, 0xbb, 0x9a, 0x55, 0x19, 0x2c, 0x0b, 0x2f, 0x46, 0x64, 0xf3, 0x17, 0x00,
	0x00, 0xff, 0xff, 0x36, 0x89, 0xf3, 0xa2, 0x55, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LocalStorageClient is the client API for LocalStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocalStorageClient interface {
	NewFile(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*storage_service.File, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (LocalStorage_UploadClient, error)
	Delete(ctx context.Context, in *storage_service.File, opts ...grpc.CallOption) (*empty.Empty, error)
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*storage_service.Status, error)
}

type localStorageClient struct {
	cc *grpc.ClientConn
}

func NewLocalStorageClient(cc *grpc.ClientConn) LocalStorageClient {
	return &localStorageClient{cc}
}

func (c *localStorageClient) NewFile(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*storage_service.File, error) {
	out := new(storage_service.File)
	err := c.cc.Invoke(ctx, "/local.LocalStorage/NewFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStorageClient) Upload(ctx context.Context, opts ...grpc.CallOption) (LocalStorage_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalStorage_serviceDesc.Streams[0], "/local.LocalStorage/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &localStorageUploadClient{stream}
	return x, nil
}

type LocalStorage_UploadClient interface {
	Send(*storage_service.Chunk) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type localStorageUploadClient struct {
	grpc.ClientStream
}

func (x *localStorageUploadClient) Send(m *storage_service.Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localStorageUploadClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localStorageClient) Delete(ctx context.Context, in *storage_service.File, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/local.LocalStorage/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localStorageClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*storage_service.Status, error) {
	out := new(storage_service.Status)
	err := c.cc.Invoke(ctx, "/local.LocalStorage/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalStorageServer is the server API for LocalStorage service.
type LocalStorageServer interface {
	NewFile(context.Context, *empty.Empty) (*storage_service.File, error)
	Upload(LocalStorage_UploadServer) error
	Delete(context.Context, *storage_service.File) (*empty.Empty, error)
	Status(context.Context, *empty.Empty) (*storage_service.Status, error)
}

// UnimplementedLocalStorageServer can be embedded to have forward compatible implementations.
type UnimplementedLocalStorageServer struct {
}

func (*UnimplementedLocalStorageServer) NewFile(ctx context.Context, req *empty.Empty) (*storage_service.File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewFile not implemented")
}
func (*UnimplementedLocalStorageServer) Upload(srv LocalStorage_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (*UnimplementedLocalStorageServer) Delete(ctx context.Context, req *storage_service.File) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedLocalStorageServer) Status(ctx context.Context, req *empty.Empty) (*storage_service.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterLocalStorageServer(s *grpc.Server, srv LocalStorageServer) {
	s.RegisterService(&_LocalStorage_serviceDesc, srv)
}

func _LocalStorage_NewFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStorageServer).NewFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.LocalStorage/NewFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStorageServer).NewFile(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalStorage_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalStorageServer).Upload(&localStorageUploadServer{stream})
}

type LocalStorage_UploadServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*storage_service.Chunk, error)
	grpc.ServerStream
}

type localStorageUploadServer struct {
	grpc.ServerStream
}

func (x *localStorageUploadServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localStorageUploadServer) Recv() (*storage_service.Chunk, error) {
	m := new(storage_service.Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LocalStorage_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(storage_service.File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStorageServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.LocalStorage/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStorageServer).Delete(ctx, req.(*storage_service.File))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalStorage_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalStorageServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/local.LocalStorage/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalStorageServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocalStorage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "local.LocalStorage",
	HandlerType: (*LocalStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewFile",
			Handler:    _LocalStorage_NewFile_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LocalStorage_Delete_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _LocalStorage_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _LocalStorage_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "local.proto",
}
